<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>jsonp or cors 解决跨域</title>
    <url>/2021/10/08/jsonp%E5%92%8Ccors%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。对于JSON大家应该是很了解了吧，不是很清楚的朋友可以去json.org上了解下，简单易懂。</p>
<span id="more"></span>
<h4 id="1-什么是跨域"><a href="#1-什么是跨域" class="headerlink" title="1.什么是跨域"></a>1.什么是跨域</h4><p>要了解跨域，先说说同源策略。同源策略是 Netscape 公司提出的一个著名的安全策略，所有支持 JavaScript 的浏览器都会使用这个策略。所谓同源是指，域名，协议，端口相同。当页面在执行一个脚本时会检查所访问的资源是否同源，如果非同源，那么在请求数据时，浏览器会在控制台中报一个异常。拒绝访问。</p>
<h4 id="2-jsonp实现原理"><a href="#2-jsonp实现原理" class="headerlink" title="2.jsonp实现原理"></a>2.jsonp实现原理</h4><p>利用在页面创建<code>&lt;script&gt;</code>节点的方法向不同域提交HTTP，然后调用 html 页面函数，通过这项技术可以解决跨域提交Ajax请求的问题。<br>缺点：只支持 get 请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 导入模块</span><br><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">const app = express()</span><br><span class="line">app.get(&#x27;/json&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">    // 结构</span><br><span class="line">    const &#123;callback&#125; =req.query</span><br><span class="line">    const obj = &#123;</span><br><span class="line">        name:&#x27;fs&#x27;,</span><br><span class="line">        age:12</span><br><span class="line">    &#125;</span><br><span class="line">    // 转为查询字符串</span><br><span class="line">    res.send(`$&#123;callback&#125;($&#123;JSON.stringify(obj)&#125;)`)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3001,()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;完成&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">   <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">res</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(res);</span></span><br><span class="line"><span class="javascript">   &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:3001/json?callback=fn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="3-cors实现原理"><a href="#3-cors实现原理" class="headerlink" title="3.cors实现原理"></a>3.cors实现原理</h4><p>cors 是 Express 的一个第三方中间件.通过安装和配置 cors 中间件，可以很方便解决跨域问题。</p>
<ul>
<li>使用步骤<ul>
<li>安装中间件：<code>npm i cors</code></li>
<li>导入中间件：`const cors = require(‘cors’)</li>
<li>配置中间件：在路由之前调用<code>app.use(cors())</code></li>
</ul>
</li>
<li>案例代码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 导入 express 模块</span><br><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line"></span><br><span class="line">// 创建 express 的服务器实例</span><br><span class="line">const app = express()</span><br><span class="line"></span><br><span class="line">// 导入中间件</span><br><span class="line">const cors = require(&#x27;cors&#x27;)</span><br><span class="line">// 配置中间件</span><br><span class="line">app.use(cors())</span><br><span class="line"></span><br><span class="line">// 配置解析表单数据的中间件</span><br><span class="line">app.use(express.urlencoded(&#123; extended: false &#125;))</span><br><span class="line"></span><br><span class="line">// 导入路由模块</span><br><span class="line">const router = require(&#x27;./020-apiRouter&#x27;)</span><br><span class="line">// 把路由模块，注册到 app 上</span><br><span class="line">app.use(&#x27;/api&#x27;, router)</span><br><span class="line"></span><br><span class="line">// 调用 app.listen 方法，指定端口号并启动 web 服务器</span><br><span class="line">app.listen(3000, () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;running……&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>jsonp</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 数据库</title>
    <url>/2021/10/08/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="一、数据库基本概念"><a href="#一、数据库基本概念" class="headerlink" title="一、数据库基本概念"></a>一、数据库基本概念</h2><h4 id="1-什么是数据库"><a href="#1-什么是数据库" class="headerlink" title="1.什么是数据库"></a>1.什么是数据库</h4><ul>
<li>数据库是用来组织、存储和管理数据的仓库<span id="more"></span></li>
<li>为了方便管理互联网世界中数据，就有了数据库管理系统的概念。用户可以对数据库进行新增、查询、更新、删除等操作。</li>
</ul>
<h4 id="2-常见数据库及其分类"><a href="#2-常见数据库及其分类" class="headerlink" title="2.常见数据库及其分类"></a>2.常见数据库及其分类</h4><ul>
<li>常见数据库分类<ul>
<li>MySQL 数据库</li>
<li>Oracle 数据库（收费）</li>
<li>SQL Server 数据库（收费）</li>
<li>Mongodb 数据库</li>
</ul>
</li>
</ul>
<h2 id="二、SQL-语句"><a href="#二、SQL-语句" class="headerlink" title="二、SQL 语句"></a>二、SQL 语句</h2><h4 id="1、什么是SQL"><a href="#1、什么是SQL" class="headerlink" title="1、什么是SQL"></a>1、什么是SQL</h4><ul>
<li>SQL 是结构化查询语言，专门用来访问和数据库的编程语言，能够以变成形式，操作数据库里面的数据。</li>
<li>三个关键点：<ul>
<li>SQL 是一门数据库编程语言</li>
<li>使用 SQL 语言编写出来的代码，叫做 SQL 语句</li>
<li>SQL 语言只能关系型数据库中使用（例如 MySQL、Oracle、SQL Server）。非关系型数据库（例如 Mongodb）不支持 SQL 语言</li>
</ul>
</li>
</ul>
<h4 id="2、SQL-的语句"><a href="#2、SQL-的语句" class="headerlink" title="2、SQL 的语句"></a>2、SQL 的语句</h4><ul>
<li><p>数据库名字 <code>users</code></p>
</li>
<li><p>通过 * 把 users 表中的所有的数据查询出来</p>
<pre><code>  select * from users
</code></pre>
</li>
<li><p>把表格 username,password 项都找出来</p>
<pre><code>  select username,password from users
</code></pre>
</li>
<li><p>向数据表插入新的数据行</p>
<pre><code>  insert into users (username,password) values (&#39;mz&#39;,&#39;123&#39;)
  insert into users set username = &#39;mz&#39;,password = &#39;123&#39;
</code></pre>
</li>
<li><p>选择性更新数据 where 后面更新的条件</p>
<pre><code>  update users set password=8888,status=1 where id=4
</code></pre>
</li>
<li><p>删除表中 <code>id=1</code> 行</p>
<pre><code>  delete from users where id=1 
</code></pre>
</li>
<li><p><code>where</code>子句 运算符</p>
<p> <img src="/2021/10/08/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/1.png"></p>
</li>
<li><p>可以通过 where 子句来限定 select 的查询条件</p>
</li>
<li><ul>
<li><p>查询 id 为 1 的所有用户</p>
<pre><code> select * from users where id=1
</code></pre>
</li>
</ul>
</li>
<li><ul>
<li><p>查询 username 不等于 zx 的所有用户</p>
<pre><code> select * from users where username&lt;&gt;&#39;zx&#39;
</code></pre>
</li>
</ul>
</li>
<li><p>使用 and 来显示所有 status=0,并且 id 小于3 的用户</p>
<pre><code>  select * from users where status=0 and id&lt;3
</code></pre>
</li>
<li><p>使用 or 来显示所有 status 为1，或者 username 为 zs 的用户</p>
<pre><code>  select * from users where status=0 or username=&#39;zs&#39;
</code></pre>
</li>
<li><p>order by 子句 - 升序排序，按照 id</p>
<pre><code>  select * from users order by id asc
</code></pre>
</li>
<li><p>order by 子句 - 降序排序 按 username 第一个字母进行降序排序</p>
<pre><code>  select * from users order by username desc
</code></pre>
</li>
<li><p>多重排序</p>
<pre><code>  select * from users order by id asc,username desc
</code></pre>
</li>
<li><p>count(*)函数用于返回查询 status=1 结果的总数据条数的数量得到一个数字</p>
<pre><code>  select count(*) from users where status=1
</code></pre>
</li>
<li><p>使用 AS 为列设置别名</p>
</li>
<li><p>将列名 username 改为 uname , password 改为 upwd</p>
<pre><code>  select username as uname, password as upwd from users
</code></pre>
</li>
</ul>
<h2 id="三、MySQL模块"><a href="#三、MySQL模块" class="headerlink" title="三、MySQL模块"></a>三、MySQL模块</h2><h4 id="1、作用"><a href="#1、作用" class="headerlink" title="1、作用"></a>1、作用</h4><ul>
<li>通过 mysql 模块连接到 mySQL 数据库</li>
<li>通过 mysql 模块执行 SQL 语句</li>
</ul>
<h4 id="2、安装配置-mysql-模块"><a href="#2、安装配置-mysql-模块" class="headerlink" title="2、安装配置 mysql 模块"></a>2、安装配置 mysql 模块</h4><ul>
<li>安装命令<br>`npm i mysql</li>
<li>配置 mysql 模块<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1.导入 musql 模块</span><br><span class="line">const mysql = require(&#x27;mysql&#x27;)</span><br><span class="line"></span><br><span class="line">// 2.建立与 mysql 数据库连接</span><br><span class="line">const db = mysql.createPool(&#123;</span><br><span class="line">    host: &#x27;127.0.0.1&#x27;,  // 数据库的 ip 地址</span><br><span class="line">    user: &#x27;root&#x27;, // 登录数据库的账号</span><br><span class="line">    password: &#x27;root&#x27;, // 登录数据库的密码</span><br><span class="line">    database: &#x27;web67&#x27; // 指定要操作哪个数据库</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 检测 mysql 模块是否能正常工作</span><br><span class="line">db.query(&#x27;select 1&#x27;,(err,data)=&gt;&#123;</span><br><span class="line">    if(err) return console.log(err.message);</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3、使用-select-语句查询数据"><a href="#3、使用-select-语句查询数据" class="headerlink" title="3、使用 select 语句查询数据"></a>3、使用 select 语句查询数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1.导入mysql模块</span><br><span class="line">const mysql = require(&#x27;mysql&#x27;)</span><br><span class="line"></span><br><span class="line">// 与服务器建立连接</span><br><span class="line">var db = mysql.createPool(&#123;</span><br><span class="line">    host: &#x27;127.0.0.1&#x27;,  // 数据库的 ip 地址</span><br><span class="line">    user: &#x27;root&#x27;, // 登录数据库的账号</span><br><span class="line">    password: &#x27;root&#x27;, // 登录数据库的密码</span><br><span class="line">    database: &#x27;web67&#x27; // 指定要操作哪个数据库</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 查询users中所有用户数据</span><br><span class="line">db.query(&#x27;select * from users&#x27;,(err,data)=&gt;&#123;</span><br><span class="line">    if(err) return console.log(err.message);</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="4、使用-insert-into-语句插入数据"><a href="#4、使用-insert-into-语句插入数据" class="headerlink" title="4、使用 insert into 语句插入数据"></a>4、使用 insert into 语句插入数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 导入mysql模块</span><br><span class="line">const mysql = require(&#x27;mysql&#x27;)</span><br><span class="line">// 与数据库建立连接</span><br><span class="line">var db = mysql.createPool(&#123;</span><br><span class="line">    host: &#x27;127.0.0.1&#x27;,  // 数据库的 ip 地址</span><br><span class="line">    user: &#x27;root&#x27;, // 登录数据库的账号</span><br><span class="line">    password: &#x27;root&#x27;, // 登录数据库的密码</span><br><span class="line">    database: &#x27;web67&#x27; // 指定要操作哪个数据库</span><br><span class="line">&#125;)</span><br><span class="line">// 要插入的数据</span><br><span class="line">const data = &#123;</span><br><span class="line">    username:&#x27;kxu&#x27;,</span><br><span class="line">    password:&#x27;123&#x27;</span><br><span class="line">&#125;</span><br><span class="line">// mysql语句</span><br><span class="line">const dl = &#x27;insert into users set?&#x27;</span><br><span class="line"></span><br><span class="line">// 给数据库插入值</span><br><span class="line">db.query(dl,data,(err,user)=&gt;&#123;</span><br><span class="line">    if(err) return console.log(err.message);</span><br><span class="line">    console.log(user);</span><br><span class="line">    if(user.affectedRows ===1) return console.log(&#x27;插入成功&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="5、使用-update-语句更新数据"><a href="#5、使用-update-语句更新数据" class="headerlink" title="5、使用 update 语句更新数据"></a>5、使用 update 语句更新数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1.导入 mysql 模块</span><br><span class="line">const mysql = require(&#x27;mysql&#x27;)</span><br><span class="line">// 与数据库建立连接</span><br><span class="line">var db = mysql.createPool(&#123;</span><br><span class="line">    host: &#x27;127.0.0.1&#x27;,  // 数据库的 ip 地址</span><br><span class="line">    user: &#x27;root&#x27;, // 登录数据库的账号</span><br><span class="line">    password: &#x27;root&#x27;, // 登录数据库的密码</span><br><span class="line">    database: &#x27;web67&#x27; // 指定要操作哪个数据库</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 要更新的数据</span><br><span class="line">const data = &#123;</span><br><span class="line">    id: 4,</span><br><span class="line">    username:&#x27;ffff&#x27;,</span><br><span class="line">    password:&#x27;123&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">// mysql语句</span><br><span class="line">const ql = &#x27;update users set ? where id=?&#x27;</span><br><span class="line"></span><br><span class="line">// 更新数据</span><br><span class="line">db.query(ql,[data,data.id],(err,user)=&gt;&#123;</span><br><span class="line">    console.log(user);</span><br><span class="line">    if(err) return console.log(err.message);</span><br><span class="line">    if (user.affectedRows===1) return console.log(&#x27;更新成功&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="6-使用-update-语句标记删除数据"><a href="#6-使用-update-语句标记删除数据" class="headerlink" title="6.使用 update 语句标记删除数据"></a>6.使用 update 语句标记删除数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 导入模块</span><br><span class="line">const mysql = require(&#x27;mysql&#x27;)</span><br><span class="line"></span><br><span class="line">// 连接数据库</span><br><span class="line">var db = mysql.createPool(&#123;</span><br><span class="line">    host: &#x27;127.0.0.1&#x27;,  // 数据库的 ip 地址</span><br><span class="line">    user: &#x27;root&#x27;, // 登录数据库的账号</span><br><span class="line">    password: &#x27;root&#x27;, // 登录数据库的密码</span><br><span class="line">    database: &#x27;web67&#x27; // 指定要操作哪个数据库</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// mysql语句</span><br><span class="line">const dl = &#x27;update users set status=0 where id=?&#x27;</span><br><span class="line"></span><br><span class="line">// 删除</span><br><span class="line">db.query(dl,9,(err,data)=&gt;&#123;</span><br><span class="line">    if(err) return console.log(err.message);</span><br><span class="line">    if(data.affectedRows===1) return  console.log(&#x27;删除成功&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="7-通过-node-来操作-mysql"><a href="#7-通过-node-来操作-mysql" class="headerlink" title="7.通过 node 来操作 mysql"></a>7.通过 node 来操作 mysql</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 导入模块</span><br><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">const app = express()</span><br><span class="line">const mysql = require(&#x27;mysql&#x27;)</span><br><span class="line">// 连接数据库</span><br><span class="line">const db = mysql.createPool(&#123;</span><br><span class="line">    host: &#x27;127.0.0.1&#x27;,  // 数据库的 ip 地址</span><br><span class="line">    user: &#x27;root&#x27;, // 登录数据库的账号</span><br><span class="line">    password: &#x27;root&#x27;, // 登录数据库的密码</span><br><span class="line">    database: &#x27;web67&#x27; // 指定要操作哪个数据库</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 把数据返回客户端</span><br><span class="line">app.get(&#x27;/user&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">    db.query(&#x27;select * from users&#x27;, (err, data) =&gt; &#123;</span><br><span class="line">        if(err) return console.log(err.message);</span><br><span class="line">        res.send(&#123;</span><br><span class="line">            status:0,</span><br><span class="line">            msg:&#x27;请求成功&#x27;,</span><br><span class="line">            data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">// 解析post数据全局中间件</span><br><span class="line">app.use(express.urlencoded(&#123; extended: false &#125;))</span><br><span class="line">// 给users中添加用户名密码</span><br><span class="line">app.post(&#x27;/postuser&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">    const body = req.body</span><br><span class="line">    const dl = &#x27;insert into users set ?&#x27;</span><br><span class="line">    db.query(dl,body, (err, data) =&gt; &#123;</span><br><span class="line">        if (err) return console.log(err.message);</span><br><span class="line">        res.send(&#123;</span><br><span class="line">            status: 0,</span><br><span class="line">            msg: &#x27;添加成功&#x27;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">// 根据id更新用户名</span><br><span class="line">app.post(&#x27;/duser&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">    const body = req.body</span><br><span class="line">    const dl = &#x27;update users set ? where id=?&#x27;</span><br><span class="line">    db.query(dl,[body,body.id], (err, data) =&gt; &#123;</span><br><span class="line">        if (err) return console.log(err.message);</span><br><span class="line">        if(data.affactedRows!==1) console.log(&#x27;更新失败&#x27;);</span><br><span class="line">        res.send(&#123;</span><br><span class="line">            status: 0,</span><br><span class="line">            msg: &#x27;更新成功&#x27;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">// 根据id删除</span><br><span class="line">app.get(&#x27;/iuser/:id&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">    const user = req.params.id</span><br><span class="line">    const dl = &#x27;delete from users where id=?&#x27;</span><br><span class="line">    db.query(dl, user, (err, data) =&gt; &#123;</span><br><span class="line">        if (err) return console.log(err.message);</span><br><span class="line">        if (data.affactedRows !== 1) console.log(&#x27;更新失败&#x27;);</span><br><span class="line">        res.send(&#123;</span><br><span class="line">            status: 0,</span><br><span class="line">            msg: &#x27;删除成功&#x27;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;完成&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>MySQL数据库</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>中间件的学习心得</title>
    <url>/2021/10/08/%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<h5 id="1-中间件概念"><a href="#1-中间件概念" class="headerlink" title="1.中间件概念"></a>1.中间件概念</h5><p>所谓中间件，特指业务流程中间处理环节</p>
<span id="more"></span>

<h5 id="2-全局生效中间件"><a href="#2-全局生效中间件" class="headerlink" title="2.全局生效中间件"></a>2.全局生效中间件</h5><ul>
<li><p>客户端发起的的任何请求，到达服务器之后，都会触发的的中间件</p>
</li>
<li><p>通过调用 app.use(中间件函数)，即可定一个全局中间件</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 导入需要的模块</span><br><span class="line">  const express = require(&#x27;express&#x27;)</span><br><span class="line">  const app = express()</span><br><span class="line">  </span><br><span class="line">  // // 定义一个简单中间件函数</span><br><span class="line">  // const kw = (req,res,next)=&gt; &#123;</span><br><span class="line">  //     console.log(&#x27;这是最简单中间件&#x27;);</span><br><span class="line">  //     // 把流转关系传给下一个中间件或者路由</span><br><span class="line">  //     next()</span><br><span class="line">  // &#125;</span><br><span class="line">  </span><br><span class="line">  // // 全局生效中间件</span><br><span class="line">  // app.use(kw)</span><br><span class="line">  </span><br><span class="line">  // 简化</span><br><span class="line">  // 第一个中间件</span><br><span class="line">  app.use((req,res,next)=&gt;&#123;</span><br><span class="line">      console.log(&#x27;这是最简单中间件&#x27;);</span><br><span class="line">      next()</span><br><span class="line">  &#125;)</span><br><span class="line">  // 第二个中间件</span><br><span class="line">  app.use((req,res,next)=&gt;&#123;</span><br><span class="line">      console.log(&#x27;这是最简单中间件3333&#x27;);</span><br><span class="line">      next()</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  app.get(&#x27;/&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">      console.log(&#x27;调用了/这个路由&#x27;);</span><br><span class="line">      res.send(&#x27;fdff&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  app.listen(3000,()=&gt;&#123;</span><br><span class="line">      console.log(&#x27;完成&#x27;);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<h5 id="3-中间件作用"><a href="#3-中间件作用" class="headerlink" title="3.中间件作用"></a>3.中间件作用</h5><p>  多个中间件之间，共享一份 req , res, 基于这样特性，我们可以在上游中间件中，统一为 req, res对象添加自定义属性方法，供下游中间件或路由器进行使用</p>
<h5 id="4-局部生效的中间件"><a href="#4-局部生效的中间件" class="headerlink" title="4.局部生效的中间件"></a>4.局部生效的中间件</h5><ul>
<li>不使用 app.use() 定义的中间件，叫做局部中间件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">const app = express()</span><br><span class="line"></span><br><span class="line">// 中间件</span><br><span class="line">const mv1 = (req,res,next) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;这是中间件数&#x27;);</span><br><span class="line">    next()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">    res.send(&#x27;ggjg&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/user&#x27;,mv1,(req,res)=&gt;&#123;</span><br><span class="line">    res.send(&#x27;ffddf&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;完成&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="5-中间件注意事项"><a href="#5-中间件注意事项" class="headerlink" title="5.中间件注意事项"></a>5.中间件注意事项</h5><ul>
<li>一定要在路由之前注册中间件</li>
<li>客户端发送过来的请求，可以连续调用多个中间件进行处理</li>
<li>执行完中间件的业务代码之后，不要忘记调用 <code>next()</code> 函数</li>
<li>为了防止代码逻辑混乱，调用 <code>next()</code> 函数后不要再写额外的代码</li>
<li>连续调用多个中间件时，多个中间件之间，共享 <code>req</code> 和 <code>res</code> 对象</li>
</ul>
<h5 id="6-中间件分类"><a href="#6-中间件分类" class="headerlink" title="6.中间件分类"></a>6.中间件分类</h5><ul>
<li><p>应用级别的中间件</p>
<ul>
<li>通过 <code>app.use()</code> 或 <code>app.get()</code> 或 <code>app.post()</code> ，绑定到 <code>app</code> 实例上的中间件，叫做应用级别的中间件</li>
</ul>
</li>
<li><p>路由级别的中间件</p>
<ul>
<li>绑定到 <code>express.Router()</code> 实例上的中间件，叫做路由级别的中间件</li>
</ul>
</li>
<li><p>错误级别的中间件</p>
<ul>
<li>注意：错误级别中间件必须注册在所有路由之后<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">const app = express()</span><br><span class="line">app.get(&#x27;/&#x27;,(req,res)=&gt;&#123;</span><br><span class="line"> throw new Error(&#x27;服务器内部发生错误&#x27;)</span><br><span class="line"> res.send(&#x27;fsaf&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">// 错误级别中间件，放在所有路由最后面</span><br><span class="line">app.use((err,req,res,next)=&gt;&#123;</span><br><span class="line"> console.log(&#x27;发生了错误&#x27;+err.message);</span><br><span class="line"> res.send(err.message)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line"> console.log(&#x27;完成&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Express 内置的中间件</p>
<ul>
<li>express.static<code> 快速托管静态资源的内置中间件，例如： HTML 文件、图片、</code>CSS` 样式等（无兼容性）</li>
<li>express.json<code>解析</code>JSON<code>格式的请求体数据（**有兼容性**，仅在</code>4.16.0+` 版本中可用）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">const app = express()</span><br><span class="line">app.use(express.json())</span><br><span class="line">app.post(&#x27;/user&#x27;,(req,res)=&gt;&#123;</span><br><span class="line"> // req.body接收客户端请求体</span><br><span class="line"> res.send(req.body)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line"> console.log(&#x27;完成&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>express.urlencoded<code>解析</code>URL-encoded<code>格式的请求体数据（**有兼容性**，仅在</code>4.16.0+` 版本中可用）,用法同上</li>
</ul>
</li>
<li><p>第三方的中间件</p>
</li>
</ul>
<h5 id="7-自定义中间件"><a href="#7-自定义中间件" class="headerlink" title="7.自定义中间件"></a>7.自定义中间件</h5><ul>
<li><p>自己手动模拟一个类似于 <code>express.urlencoded</code> 这样的中间件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 导入 express 模块</span><br><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">// 创建 express 的服务器实例</span><br><span class="line">const app = express()</span><br><span class="line">// 4. 导入 Node 内置模块 querystring</span><br><span class="line">const qs = require(&#x27;querystring&#x27;)</span><br><span class="line">// 解析表单数据的中间件</span><br><span class="line">app.use((req,res,next)=&gt;&#123;</span><br><span class="line">    // 定义中间价具体的业务逻辑</span><br><span class="line">// 1. 定义一个 str 字符串，专门用来存储客户端发送过来的请求体数据</span><br><span class="line">    let str = &#x27;&#x27;</span><br><span class="line">// 2. 监听 req 的 data 事件</span><br><span class="line">    req.on(&#x27;data&#x27;,rem =&gt;&#123;</span><br><span class="line">        str+=rem</span><br><span class="line">    &#125;)</span><br><span class="line">// 3. 监听 req 的 end 事件</span><br><span class="line">    req.on(&#x27;end&#x27;,()=&gt;&#123;</span><br><span class="line">        // 5. 调用 qs.parse() 方法，将查询字符串解析成对象</span><br><span class="line">        const arr = qs.parse(str)</span><br><span class="line">        req.body=arr</span><br><span class="line">        next()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">    app.post(&#x27;/user&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">        // 6. 将解析出来的数据对象挂载为 req.body 属性</span><br><span class="line">        res.send(req.body)</span><br><span class="line">    &#125;)</span><br><span class="line">// 调用 app.listen方法，指定端口号并启动 web 服务器</span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;完成&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>在上面基础上封装</p>
<p>服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 导入 express 模块</span><br><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">// 创建 express 的服务器实例</span><br><span class="line">const app = express()</span><br><span class="line">// 4. 导入 Node 内置模块 querystring</span><br><span class="line">// 导入中间件模块</span><br><span class="line">const arr = require(&#x27;./封装中间件&#x27;)</span><br><span class="line">// 全局中间件</span><br><span class="line">app.use(arr)</span><br><span class="line">app.post(&#x27;/user&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    // 6. 将解析出来的数据对象挂载为 req.body 属性</span><br><span class="line">    res.send(req.body)</span><br><span class="line">&#125;)</span><br><span class="line">// 调用 app.listen方法，指定端口号并启动 web 服务器</span><br><span class="line">app.listen(3000, () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;完成&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>中间件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const qs = require(&#x27;querystring&#x27;)</span><br><span class="line">// 解析表单数据的中间件</span><br><span class="line">module.exports=((req, res, next) =&gt; &#123;</span><br><span class="line">    // 定义中间价具体的业务逻辑</span><br><span class="line">    // 1. 定义一个 str 字符串，专门用来存储客户端发送过来的请求体数据</span><br><span class="line">    let str = &#x27;&#x27;</span><br><span class="line">    // 2. 监听 req 的 data 事件</span><br><span class="line">    req.on(&#x27;data&#x27;, rem =&gt; &#123;</span><br><span class="line">        str += rem</span><br><span class="line">    &#125;)</span><br><span class="line">    // 3. 监听 req 的 end 事件</span><br><span class="line">    req.on(&#x27;end&#x27;, () =&gt; &#123;</span><br><span class="line">        // 5. 调用 qs.parse() 方法，将查询字符串解析成对象</span><br><span class="line">        const arr = qs.parse(str)</span><br><span class="line">        req.body = arr</span><br><span class="line">        next()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>导入导出、回调地狱、同异微宏任务</title>
    <url>/2021/10/16/%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E3%80%81%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1%E3%80%81%E5%90%8C%E5%BC%82%E5%BE%AE%E5%AE%8F%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<ul>
<li>默认导入导出<ul>
<li>默认导出： export default {xxx}<span id="more"></span></li>
<li>默认导入： import 接收名称 from ‘模块地址</li>
</ul>
</li>
</ul>
<p><strong>每个模块只允许默认导出一次</strong></p>
<ul>
<li><p>按需导入导出</p>
<pre><code>  按需导出：export 导出的成员（let a = 10)
  按需导入： import &#123;多个接收名称&#125; from &#39;模块地址&#39;
</code></pre>
</li>
</ul>
<p><strong>每个模块可以按需导出多次</strong></p>
<p><code>as</code> 关键字可以改名字<code>（import &#123;a as b&#125; from &#39;模块地址&#39;）</code></p>
<ul>
<li><p>按需导入导出可以同时使用，导入方法不同</p>
<ul>
<li>import   <strong>默认导入名称</strong>，**{按需导入名称}** from ‘模块地址’</li>
</ul>
</li>
<li><p>直接运行导入模块代码，并不执行模块向外共享代码</p>
<pre><code>  import &#39;模块地址&#39;
</code></pre>
</li>
<li><p>解决回调地狱</p>
<ul>
<li><code>async</code> 和 <code>await</code> 语法</li>
<li>注意：<ul>
<li><code>await</code>关键字后面要跟 <strong>promise对象</strong></li>
<li><code>awaut</code>关键字仅仅只能出现在被<code>async</code>修饰函数里面</li>
<li> 在<code>async</code>方法中，第一个<code>await</code>,之前得代码会同步执行，<code>await</code>之后的代码会异步执行</li>
<li> <code>thenfs</code>是第三方包读取文件包</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/kong_xiaojun/my-image/raw/master/img/20211016192759.png"></p>
<ul>
<li><p>同步任务与异步任务</p>
<p> <img src="/2021/10/16/%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E3%80%81%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1%E3%80%81%E5%90%8C%E5%BC%82%E5%BE%AE%E5%AE%8F%E4%BB%BB%E5%8A%A1/20211016194522.png"></p>
</li>
<li><p>宏任务与微任务</p>
<p><img src="https://gitee.com/kong_xiaojun/my-image/raw/master/img/20211016192907.png"></p>
</li>
</ul>
<p>  <img src="https://gitee.com/kong_xiaojun/my-image/raw/master/img/20211016192855.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>回调地狱</tag>
        <tag>同异微宏任务</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手教你创建hexo博客</title>
    <url>/2021/10/08/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%88%9B%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>市面上现在有各种博客框架，本博客教大家的是 Hexo 博客框架，目前比较火。搭建博客中遇到各种各样问题，网上方案也比较成熟。</p>
   <span id="more"></span>

<h5 id="一、搭建环境"><a href="#一、搭建环境" class="headerlink" title="一、搭建环境"></a>一、搭建环境</h5><ol>
<li>安装 git</li>
<li>安装 node.js</li>
<li>安装 Hexo</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g // 安装命令</span><br><span class="line">hexo -v // 查看安装成功与否</span><br></pre></td></tr></table></figure>

<h5 id="二、创建-gitHub-仓库"><a href="#二、创建-gitHub-仓库" class="headerlink" title="二、创建 gitHub 仓库"></a>二、创建 gitHub 仓库</h5><ol>
<li>注册 gitHub 账号</li>
<li>仓库名字特定：账号名接上.github.io</li>
</ol>
<h5 id="三、生成-ssh-密钥"><a href="#三、生成-ssh-密钥" class="headerlink" title="三、生成 ssh 密钥"></a>三、生成 ssh 密钥</h5><ol>
<li>创建一个空的文件夹，打开命令栏，切换到文件夹路径，然后生成 ssh :</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &#x27;gitHub邮件地址&#x27;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>然后电脑中 C:\Users\11343.ssh 中找到 id_rsa.pub 文件，全部复制内容，然后在 github 创建密钥,密钥名字随便取，然后把内容复制里面<br><img src="/2021/10/08/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%88%9B%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/123.png" alt="alt"><br><img src="/2021/10/08/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%88%9B%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/2.png" alt="alt"></li>
</ol>
<p><img src="/2021/10/08/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%88%9B%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/3.png" alt="alt"></p>
<ol start="3">
<li><p>测试 ssh 是否绑定成功,有图片这句话就是成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p><img src="/2021/10/08/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%88%9B%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/4.png" alt="alt"></p>
</li>
</ol>
<h5 id="4-本地生成博客内容"><a href="#4-本地生成博客内容" class="headerlink" title="4.本地生成博客内容"></a>4.本地生成博客内容</h5><ol>
<li><p>在你新建文件打开命令栏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init // 初始化项目</span><br><span class="line">hexo s 静态生成hexo页面，就是开始服务器  http://localhost:4000 可以打开这个网址查看自己项目</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="5、把博客发布在互联网"><a href="#5、把博客发布在互联网" class="headerlink" title="5、把博客发布在互联网"></a>5、把博客发布在互联网</h5><ol>
<li><p>在你项目文件夹中打开 _config.yml</p>
<p>deploy:</p>
<p>type: git</p>
<p>repository: 填入你的仓库地址</p>
<p>branch: main</p>
</li>
</ol>
<p><img src="/2021/10/08/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%88%9B%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/6.png" alt="alt"></p>
<ol start="2">
<li><p>安装工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li><p>生成页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li>
<li><p>上传文件到 github</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d //等待弹出小框框</span><br></pre></td></tr></table></figure>

<p><img src="/2021/10/08/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%88%9B%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/12.png" alt="计划"></p>
<p>然看到命令栏在输入 github 账户名</p>
<p><img src="/2021/10/08/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%88%9B%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/7.png" alt="alt"></p>
</li>
</ol>
<p>在里面输入 github 令牌，怎么注册令牌百度</p>
<p>然后点确定就上传成功了</p>
<ol start="5">
<li><p>在 github 查看自己生成的网址，切换到自己仓库</p>
<p><img src="/2021/10/08/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%88%9B%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/9.png" alt="alt"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>搭建博客</tag>
        <tag>kexo</tag>
      </tags>
  </entry>
</search>
